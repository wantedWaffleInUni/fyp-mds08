import React from 'react';
import Modal from './Modal.jsx';

export default function SelectAlgorithmModal(props) {
  const {
    open, onClose, onConfirm,
    /* support both naming styles */
    options,
    algoOptions,
    selected,
    selectedAlgorithm,
    onSelect,
    onSelectAlgorithm,
    showNonce,
    needsNonce,
    nonce,
    onChangeNonce,
    isLoading,               // may be passed
    confirming: confirmingProp, // or this may be passed
    flipped = {},
    setFlip = () => {},
  } = props;

  // normalize
  const list = options ?? algoOptions ?? [];
  const showNonceField = (showNonce ?? needsNonce) || false;
  const chosen = selected ?? selectedAlgorithm;
  const handleSelect = onSelect ?? onSelectAlgorithm ?? (() => {});
  const confirming = Boolean(isLoading ?? confirmingProp); // <-- supports both


    if (process.env.NODE_ENV !== 'production') {
      // eslint-disable-next-line no-console
      console.log('[SelectAlgorithmModal] props:', {
        options, algoOptions, selected, selectedAlgorithm, showNonce, needsNonce,
      });
    }

  return (
    <Modal open={open} onClose={() => !confirming && onClose?.()} ariaLabel="Choose Encryption Algorithm">
      <div className="modal-header">
        <h3 className="modal-title">ðŸ”’ Before Encrypting</h3>
      </div>

      <div className="modal-body" aria-busy={confirming}>
        <div className="form-group">
          <label className="form-label">Select a method you prefer.</label>
          <p style={{ fontStyle:'italic', fontSize:'0.8rem' }}>
            Hover over each algorithm to see which one fits you best!
          </p>
          <br></br>

          <div className="algo-grid">
            {list.map(opt => {
              const active = chosen === opt.value;
              const isFlipped = !!flipped[opt.value];

              const selectThis = () => {
                if (confirming) return;
                handleSelect(opt.value);
              };

              const setFlipSafe = (on) => {
                if (confirming) return;
                setFlip(opt.value, on);
              };

              return (
                <div
                  key={opt.value}
                  className={`algo-card ${active ? 'active' : ''} ${isFlipped ? 'flipped' : ''} ${confirming ? 'disabled' : ''}`}
                  onClick={selectThis}
                  onMouseEnter={() => setFlipSafe(true)}
                  onMouseLeave={() => setFlipSafe(false)}
                  tabIndex={confirming ? -1 : 0}
                  onFocus={() => setFlipSafe(true)}
                  onBlur={() => setFlipSafe(false)}
                  role="button"
                  aria-pressed={active}
                  aria-disabled={confirming}
                  aria-label={`Choose ${opt.label}`}
                >
                  <div className="algo-card-inner">
                    <div className="algo-face front">
                      <div className="algo-title">{opt.label}</div>
                    </div>
                    <div className="algo-face back">
                      <div className="algo-back-title" style={{ fontWeight:'bold' }}>{opt.label}</div>
                      <p className="algo-desc">{opt.desc}</p>
                    </div>
                  </div>

                  <button
                    type="button"
                    className="info-badge"
                    aria-label={`About ${opt.label}`}
                    disabled={confirming}
                    onClick={(e) => { e.stopPropagation(); setFlipSafe(); }}
                  >
                    â“˜
                  </button>
                </div>
              );
            })}
          </div>
        </div>

        {showNonceField && (
          <div className="form-group">
            <label className="form-label">Nonce (optional)</label>
            <input
              type="text"
              className="form-control"
              value={nonce ?? ''}
              onChange={(e) => (onChangeNonce ?? (() => {}))(e.target.value)}
              placeholder="If empty, a nonce will be generated by the server"
              disabled={confirming}
            />
            <small style={{ color:'#666', marginTop:'.5rem', display:'block' }}>
              Save the nonce with your key to decrypt later.
            </small>
          </div>
        )}
      </div>

      <div className="modal-footer d-flex gap-2 justify-end">
        <button className="btn btn-secondary" onClick={onClose} disabled={confirming}>Cancel</button>
        <button className="btn btn-primary" onClick={onConfirm} disabled={confirming}>
          {confirming ? 'Encryptingâ€¦' : 'Confirm'}
        </button>
      </div>
    </Modal>
  );


}



