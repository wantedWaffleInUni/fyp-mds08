{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  // 30 seconds\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Convert file to base64\nconst fileToBase64 = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n};\n\n// API functions\nexport const encryptImage = async (imageFile, key = 'default_key_123') => {\n  try {\n    const imageData = await fileToBase64(imageFile);\n    const response = await api.post('/encrypt', {\n      image: imageData,\n      key: key\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('Encryption error:', error);\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Encryption failed');\n  }\n};\nexport const decryptImage = async (imageFile, key = 'default_key_123') => {\n  try {\n    const imageData = await fileToBase64(imageFile);\n    const response = await api.post('/decrypt', {\n      image: imageData,\n      key: key\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    console.error('Decryption error:', error);\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Decryption failed');\n  }\n};\nexport const downloadImage = async filename => {\n  try {\n    const response = await api.get(`/download/${filename}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Download error:', error);\n    throw new Error('Download failed');\n  }\n};\nexport const healthCheck = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    console.error('Health check error:', error);\n    throw new Error('API health check failed');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","fileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","encryptImage","imageFile","key","imageData","response","post","image","data","_error$response","_error$response$data","console","Error","decryptImage","_error$response2","_error$response2$data","downloadImage","filename","get","responseType","healthCheck"],"sources":["C:/Users/Yanly/Monash/FYP/fyp-mds08/chaotic-encryption-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000, // 30 seconds\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Convert file to base64\r\nconst fileToBase64 = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = (error) => reject(error);\r\n  });\r\n};\r\n\r\n// API functions\r\nexport const encryptImage = async (imageFile, key = 'default_key_123') => {\r\n  try {\r\n    const imageData = await fileToBase64(imageFile);\r\n    \r\n    const response = await api.post('/encrypt', {\r\n      image: imageData,\r\n      key: key,\r\n    });\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Encryption error:', error);\r\n    throw new Error(error.response?.data?.error || 'Encryption failed');\r\n  }\r\n};\r\n\r\nexport const decryptImage = async (imageFile, key = 'default_key_123') => {\r\n  try {\r\n    const imageData = await fileToBase64(imageFile);\r\n    \r\n    const response = await api.post('/decrypt', {\r\n      image: imageData,\r\n      key: key,\r\n    });\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Decryption error:', error);\r\n    throw new Error(error.response?.data?.error || 'Decryption failed');\r\n  }\r\n};\r\n\r\nexport const downloadImage = async (filename) => {\r\n  try {\r\n    const response = await api.get(`/download/${filename}`, {\r\n      responseType: 'blob',\r\n    });\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Download error:', error);\r\n    throw new Error('Download failed');\r\n  }\r\n};\r\n\r\nexport const healthCheck = async () => {\r\n  try {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Health check error:', error);\r\n    throw new Error('API health check failed');\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}